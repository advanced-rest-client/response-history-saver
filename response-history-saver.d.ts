/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   response-history-saver.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../uuid-generator/uuid-generator.d.ts" />

declare namespace LogicElements {

  /**
   * An element that saves requests history in a datastore.
   *
   * This element supports Advanced REST Client project.
   *
   * It handles the `response-ready` event asynchronously and updates both
   * requests history and history data data store.
   *
   * The requests history keeps a daily record of requests made by the application.
   * It keeps record of rhe request data that can be restored lated by the
   * application.
   *
   * The history data keeps record of every request made by the application.
   * It can be used to analyse performance of an API endpoint.
   *
   * ## Data model
   *
   * ### request data
   *
   * Note that payload is always string even if the response body was different type.
   *
   * Property | Type | Description
   * ----------------|-------------|-------------
   * `_id` | `String` | PouchDB database key.
   * `timings` | `Object` | Valid HAR 1.2 timings object.
   * `totalTime` | `Number` | Number of milliseconds that took to perform the full request.
   * `created` | `Number` | Timestamp of the entry
   * `request` | `Object` | A request details object (see below).
   * `request.headers` | `String` | HTTP headers string sent to the server.
   * `request.payload` | `String` | HTTP message string set to the server.
   * `request.url` | `String` | Request URL
   * `request.method` | `String` | HTTP method of the request
   * `response` | `Object` | Response details object
   * `response.statusCode` | `Number` | A status code of the response.
   * `response.statusText` | `String` | Status text message. Can be empty or undefined.
   * `response.headers` | `String` | HTTP headers string of the response.
   * `response.payload` | `String` | Response body string.
   * `stats` | `Object` | Request and response basic statistics
   * `stats.request` | `Object` | Request basic statistics
   * `stats.request.headersSize` | `Number` | Request headers size in bytes
   * `stats.request.payloadSize` | `Number` | Request payload size in bytes
   * `stats.response` | `Object` | Response basic statistics
   * `stats.response.headersSize` | `Number` | Response headers size in bytes
   * `stats.response.payloadSize` | `Number` | Response payload size in bytes
   */
  class ResponseHistorySaver extends Polymer.Element {
    readonly _dbData: PouchDB|null;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Handler for the `response-ready` event
     */
    _afterRequestHandler(e: CustomEvent|null): void;

    /**
     * Saves request and response data in history.
     *
     * @param request ARC request object
     * @param response ARC response object
     * @param timings Request timings as HAR 1.2 timings object
     */
    saveHistory(request: object|null, response: object|null, timings: object|null): Promise<any>|null;

    /**
     * Saves history data for history analysis in the data store.
     *
     * @param request The request object containg information about
     * the request
     * @param response The response object for the response
     * @param eventTimings The timings object as descrived in HAR 1.2 spec. Optional.
     * @returns A promise resolved when data were inserted to the
     * datastore.
     */
    _saveHistoryData(request: Request|null, response: Response|null, eventTimings: object|null): Promise<any>|null;

    /**
     * Creates a data store model for `_saveHistoryData`
     */
    _createHistoryDataModel(request: any, response: any, eventTimings: any): any;

    /**
     * Updates the requests history data store.
     * If the request for given URL and method has been already performed this
     * day then the record in the datastore is updated with new data.
     * Otherwise a new record is created.
     *
     * @param request The request object.
     * @param eventTimings A HAR 1.2 timings object from the response
     * event.
     * @returns A promise that is resolved then the history object has
     * been updated in the data store.
     */
    _updateHistory(request: Request|null, eventTimings: object|null): Promise<any>|null;

    /**
     * Computes a valid timings object as descrived in HAR 1.2 spec.
     *
     * @param eventTimings A timings object passed by the response
     * event
     * @returns A valid HAR 1.2 timings object.
     */
    _computeTimings(eventTimings: object|null): object|null;

    /**
     * Computes a timestamp of the request start time.
     * If timings object provided with the response event contains `startTime`
     * property it will compute timestamp from it. Otherwise it will use
     * current time.
     *
     * @param eventTimings Timings object from the response event.
     * @returns Timestamp of the request start.
     */
    _computeStartTime(eventTimings: object|null): Number|null;

    /**
     * Computes total time of the request from the timings object.
     *
     * @param timings A timings object as described in HAR 1.2 spec.
     * @returns Sum of times in the `timings` object. The `-1` values
     * doeasn't adds. It returns `-1` if all values are -1.
     */
    _computeTotalTime(timings: object|null): Number|null;

    /**
     * Produces valid URL to be used in the history-data store.
     * The URL is stripped from query parameters and hash.
     *
     * @param url A URL to process
     */
    _computeHistoryStoreUrl(url: String|null): String|null;

    /**
     * Computes size of the payload.
     *
     * @param payload The payload
     * @returns Size of the payload
     */
    _computePayloadSize(payload: ArrayBuffer|Blob|String|null): Number|null;

    /**
     * Calculates size of the string
     *
     * @param str A string to compute size from.
     * @returns Size of the string.
     */
    _calculateBytes(str: String|null): Number|null;

    /**
     * Computes an ID for the `history-data` datas tore.
     *
     * @param url Request URL stripped from query parameters and
     * the hash.
     * @param method HTTP method name.
     * @returns Generated unique for this request data store ID. It uses
     * UUID generator to add some random data to the ID except for the
     * URL and method.
     */
    _computeHistoryDataId(url: String|null, method: String|null): String|null;

    /**
     * Computes a payload message as a string.
     *
     * @param input Request or response payload
     */
    _computePayloadString(input: any|null): String|null;

    /**
     * Convert ArrayBuffer to readable form
     *
     * @returns Converted string
     */
    _arrayBufferToString(buffer: ArrayBuffer|null): String|null;

    /**
     * Handles exceptions to log message ad throws the same exception
     */
    _handleException(e: Error|null): void;
  }
}

interface HTMLElementTagNameMap {
  "response-history-saver": LogicElements.ResponseHistorySaver;
}
